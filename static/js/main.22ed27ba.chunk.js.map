{"version":3,"sources":["components/Feedback/Statistics/Statistics.js","components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Section/Section.js","components/Feedback/Notification/Notification.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","optionItem","index","onClick","Section","title","children","Notification","message","Feedback","state","idx","setState","prevState","this","countTotalFeedback","countTotal","countPositiveFeedbackPercentage","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAgBeA,MAff,YAAuE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAEzC,OACI,gCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KAEX,oDAAuBC,EAAvB,YCGDC,MAZf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAEhC,OACI,8BACKD,EAAQE,KAAI,SAACC,EAAYC,GAAb,OACT,wBAAyBC,QAAS,kBAAMJ,EAAgBG,IAAxD,SAAiED,GAApDA,SCIdG,MATf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAEtB,OAAO,qCACP,6BAAKD,IACJC,MCEUC,MANf,YAAoC,IAAZC,EAAW,EAAXA,QAEpB,OAAO,4BAAIA,KCGTV,EAAU,CACZ,OACA,UACA,OAGEW,E,4MACFC,MAAQ,CACJlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAaTK,gBAAkB,SAACY,GACf,OAAQb,EAAQa,IACZ,IAAK,OACD,EAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBrB,KAAMqB,EAAUrB,KAAO,MAE3B,MACJ,IAAK,UACD,EAAKoB,UAAS,SAAAC,GAAS,MAAK,CACxBpB,QAASoB,EAAUpB,QAAU,MAEjC,MACJ,IAAK,MACD,EAAKmB,UAAS,SAAAC,GAAS,MAAK,CACxBnB,IAAKmB,EAAUnB,IAAM,Q,wDAxBrC,WACI,MAA+BoB,KAAKJ,MACpC,OADA,EAAQlB,KAAR,EAAcC,QAAd,EAAuBC,M,6CAI3B,WAEI,OADcoB,KAAKC,qBACH,EAAuB,IAAlBD,KAAKJ,MAAMlB,KAAasB,KAAKC,qBAAuB,I,oBA0B7E,WACI,MAA+BD,KAAKJ,MAA5BlB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBsB,EAAaF,KAAKC,qBAExB,OACI,gCACI,cAAC,EAAD,CAASV,MAAM,wBAAf,SACI,cAAC,EAAD,CAAiBP,QAASA,EAASC,gBAAiBe,KAAKf,oBAE5DiB,EACG,cAAC,EAAD,CAASX,MAAM,aAAf,SACI,cAAE,EAAF,CAAab,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOqB,EAAYpB,mBAAoBkB,KAAKG,sCAErG,cAAC,EAAD,CAAcT,QAAQ,gC,GArDnBU,aA2DRT,I,MC5DAU,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.22ed27ba.chunk.js","sourcesContent":["\r\nfunction Statistics ({good, neutral, bad, total, positivePercentage}) {\r\n\r\n        return (\r\n            <div>\r\n                <p>Good: {good}</p>\r\n                <p>Neutral: {neutral}</p>\r\n                <p>Bad: {bad}</p>\r\n                <p>Total: {total}</p>\r\n\r\n                <p>Positive feedback: {positivePercentage} %</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\nexport default Statistics;\r\n","\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n\r\n    return (\r\n        <div>\r\n            {options.map((optionItem, index) => (\r\n                <button key={optionItem} onClick={() => onLeaveFeedback(index)}>{optionItem}</button>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default FeedbackOptions;\r\n","\r\nfunction Section({ title, children }) {\r\n\r\n    return <>\r\n    <h2>{title}</h2>\r\n    {children}\r\n    </>\r\n}\r\n\r\n\r\nexport default Section;","\r\nfunction Notification({ message }) {\r\n\r\n    return <p>{message}</p>;\r\n}\r\n\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport Statistics from \"./Statistics/Statistics\"\r\nimport FeedbackOptions from \"./FeedbackOptions/FeedbackOptions\"\r\nimport Section from \"./Section/Section\"\r\nimport Notification from \"./Notification/Notification\"\r\n\r\nconst options = [\r\n    \"Good\",\r\n    \"Neutral\",\r\n    \"Bad\"\r\n]\r\n\r\nclass Feedback extends Component {\r\n    state = {\r\n        good: 0,\r\n        neutral: 0,\r\n        bad: 0,\r\n    };\r\n\r\n    countTotalFeedback() {\r\n        const { good, neutral, bad } = this.state;\r\n        return good + neutral + bad;\r\n    }\r\n\r\n    countPositiveFeedbackPercentage() {\r\n        const count = this.countTotalFeedback();\r\n        return (count > 0) ? this.state.good * 100 / this.countTotalFeedback() : 0;\r\n    }\r\n\r\n    onLeaveFeedback = (idx) => {\r\n        switch (options[idx]) {\r\n            case \"Good\":\r\n                this.setState(prevState => ({\r\n                    good: prevState.good + 1,\r\n                }))\r\n                break;\r\n            case \"Neutral\":\r\n                this.setState(prevState => ({\r\n                    neutral: prevState.neutral + 1,\r\n                }))\r\n                break;\r\n            case \"Bad\":\r\n                this.setState(prevState => ({\r\n                    bad: prevState.bad + 1,\r\n                }))\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { good, neutral, bad } = this.state;\r\n        const countTotal = this.countTotalFeedback();\r\n\r\n        return (\r\n            <div>\r\n                <Section title=\"Please leave feedback\">\r\n                    <FeedbackOptions options={options} onLeaveFeedback={this.onLeaveFeedback} />\r\n                </Section>\r\n                {countTotal ?\r\n                    <Section title=\"Statistics\">\r\n                        < Statistics good={good} neutral={neutral} bad={bad} total={countTotal} positivePercentage={this.countPositiveFeedbackPercentage()} />\r\n                    </Section> :\r\n                    <Notification message=\"There is no feedback\" />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Feedback;\r\n","import Feedback from './components/Feedback/Feedback';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feedback />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}